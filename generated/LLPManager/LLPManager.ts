// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AddLiquidity extends ethereum.Event {
  get params(): AddLiquidity__Params {
    return new AddLiquidity__Params(this);
  }
}

export class AddLiquidity__Params {
  _event: AddLiquidity;

  constructor(event: AddLiquidity) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get aumInusdl(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get llpSupply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get usdlAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get mintAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class RemoveLiquidity extends ethereum.Event {
  get params(): RemoveLiquidity__Params {
    return new RemoveLiquidity__Params(this);
  }
}

export class RemoveLiquidity__Params {
  _event: RemoveLiquidity;

  constructor(event: RemoveLiquidity) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get llpAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get aumInusdl(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get llpSupply(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get usdlAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class LLPManager extends ethereum.SmartContract {
  static bind(address: Address): LLPManager {
    return new LLPManager("LLPManager", address);
  }

  BASIS_POINTS_DIVISOR(): BigInt {
    let result = super.call(
      "BASIS_POINTS_DIVISOR",
      "BASIS_POINTS_DIVISOR():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_BASIS_POINTS_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "BASIS_POINTS_DIVISOR",
      "BASIS_POINTS_DIVISOR():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_COOLDOWN_DURATION(): BigInt {
    let result = super.call(
      "MAX_COOLDOWN_DURATION",
      "MAX_COOLDOWN_DURATION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_COOLDOWN_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_COOLDOWN_DURATION",
      "MAX_COOLDOWN_DURATION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE_PRECISION(): BigInt {
    let result = super.call(
      "PRICE_PRECISION",
      "PRICE_PRECISION():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_PRICE_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_PRECISION",
      "PRICE_PRECISION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  USDL_DECIMALS(): BigInt {
    let result = super.call("USDL_DECIMALS", "USDL_DECIMALS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_USDL_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "USDL_DECIMALS",
      "USDL_DECIMALS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addLiquidityForAccount(
    _fundingAccount: Address,
    _account: Address,
    _token: Address,
    _amount: BigInt,
    _minusdl: BigInt,
    _minllp: BigInt,
  ): BigInt {
    let result = super.call(
      "addLiquidityForAccount",
      "addLiquidityForAccount(address,address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fundingAccount),
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minusdl),
        ethereum.Value.fromUnsignedBigInt(_minllp),
      ],
    );

    return result[0].toBigInt();
  }

  try_addLiquidityForAccount(
    _fundingAccount: Address,
    _account: Address,
    _token: Address,
    _amount: BigInt,
    _minusdl: BigInt,
    _minllp: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "addLiquidityForAccount",
      "addLiquidityForAccount(address,address,address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_fundingAccount),
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_token),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_minusdl),
        ethereum.Value.fromUnsignedBigInt(_minllp),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cooldownDuration(): BigInt {
    let result = super.call(
      "cooldownDuration",
      "cooldownDuration():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_cooldownDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "cooldownDuration",
      "cooldownDuration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAums(): Array<BigInt> {
    let result = super.call("getAums", "getAums():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getAums(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getAums", "getAums():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getPrice(_maximise: boolean): BigInt {
    let result = super.call("getPrice", "getPrice(bool):(uint256)", [
      ethereum.Value.fromBoolean(_maximise),
    ]);

    return result[0].toBigInt();
  }

  try_getPrice(_maximise: boolean): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getPrice", "getPrice(bool):(uint256)", [
      ethereum.Value.fromBoolean(_maximise),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gov(): Address {
    let result = super.call("gov", "gov():(address)", []);

    return result[0].toAddress();
  }

  try_gov(): ethereum.CallResult<Address> {
    let result = super.tryCall("gov", "gov():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isHandler(param0: Address): boolean {
    let result = super.call("isHandler", "isHandler(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_isHandler(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isHandler", "isHandler(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastAddedAt(param0: Address): BigInt {
    let result = super.call("lastAddedAt", "lastAddedAt(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_lastAddedAt(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastAddedAt",
      "lastAddedAt(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  llp(): Address {
    let result = super.call("llp", "llp():(address)", []);

    return result[0].toAddress();
  }

  try_llp(): ethereum.CallResult<Address> {
    let result = super.tryCall("llp", "llp():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  llp_PRECISION(): BigInt {
    let result = super.call("llp_PRECISION", "llp_PRECISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_llp_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "llp_PRECISION",
      "llp_PRECISION():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxPoolValue(): BigInt {
    let result = super.call("maxPoolValue", "maxPoolValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxPoolValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxPoolValue", "maxPoolValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  removeLiquidityForAccount(
    _account: Address,
    _tokenOut: Address,
    _llpAmount: BigInt,
    _minOut: BigInt,
    _receiver: Address,
  ): BigInt {
    let result = super.call(
      "removeLiquidityForAccount",
      "removeLiquidityForAccount(address,address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_llpAmount),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromAddress(_receiver),
      ],
    );

    return result[0].toBigInt();
  }

  try_removeLiquidityForAccount(
    _account: Address,
    _tokenOut: Address,
    _llpAmount: BigInt,
    _minOut: BigInt,
    _receiver: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "removeLiquidityForAccount",
      "removeLiquidityForAccount(address,address,uint256,uint256,address):(uint256)",
      [
        ethereum.Value.fromAddress(_account),
        ethereum.Value.fromAddress(_tokenOut),
        ethereum.Value.fromUnsignedBigInt(_llpAmount),
        ethereum.Value.fromUnsignedBigInt(_minOut),
        ethereum.Value.fromAddress(_receiver),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdl(): Address {
    let result = super.call("usdl", "usdl():(address)", []);

    return result[0].toAddress();
  }

  try_usdl(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdl", "usdl():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  utils(): Address {
    let result = super.call("utils", "utils():(address)", []);

    return result[0].toAddress();
  }

  try_utils(): ethereum.CallResult<Address> {
    let result = super.tryCall("utils", "utils():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vault(): Address {
    let result = super.call("vault", "vault():(address)", []);

    return result[0].toAddress();
  }

  try_vault(): ethereum.CallResult<Address> {
    let result = super.tryCall("vault", "vault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  whiteListedTokens(param0: Address): boolean {
    let result = super.call(
      "whiteListedTokens",
      "whiteListedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_whiteListedTokens(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whiteListedTokens",
      "whiteListedTokens(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _utils(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _usdl(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _llp(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _cooldownDuration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _maxPoolValue(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityForAccountCall extends ethereum.Call {
  get inputs(): AddLiquidityForAccountCall__Inputs {
    return new AddLiquidityForAccountCall__Inputs(this);
  }

  get outputs(): AddLiquidityForAccountCall__Outputs {
    return new AddLiquidityForAccountCall__Outputs(this);
  }
}

export class AddLiquidityForAccountCall__Inputs {
  _call: AddLiquidityForAccountCall;

  constructor(call: AddLiquidityForAccountCall) {
    this._call = call;
  }

  get _fundingAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _token(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _minusdl(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _minllp(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class AddLiquidityForAccountCall__Outputs {
  _call: AddLiquidityForAccountCall;

  constructor(call: AddLiquidityForAccountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RemoveFromWhiteListTokenCall extends ethereum.Call {
  get inputs(): RemoveFromWhiteListTokenCall__Inputs {
    return new RemoveFromWhiteListTokenCall__Inputs(this);
  }

  get outputs(): RemoveFromWhiteListTokenCall__Outputs {
    return new RemoveFromWhiteListTokenCall__Outputs(this);
  }
}

export class RemoveFromWhiteListTokenCall__Inputs {
  _call: RemoveFromWhiteListTokenCall;

  constructor(call: RemoveFromWhiteListTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromWhiteListTokenCall__Outputs {
  _call: RemoveFromWhiteListTokenCall;

  constructor(call: RemoveFromWhiteListTokenCall) {
    this._call = call;
  }
}

export class RemoveLiquidityForAccountCall extends ethereum.Call {
  get inputs(): RemoveLiquidityForAccountCall__Inputs {
    return new RemoveLiquidityForAccountCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityForAccountCall__Outputs {
    return new RemoveLiquidityForAccountCall__Outputs(this);
  }
}

export class RemoveLiquidityForAccountCall__Inputs {
  _call: RemoveLiquidityForAccountCall;

  constructor(call: RemoveLiquidityForAccountCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _llpAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minOut(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _receiver(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class RemoveLiquidityForAccountCall__Outputs {
  _call: RemoveLiquidityForAccountCall;

  constructor(call: RemoveLiquidityForAccountCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetCooldownDurationCall extends ethereum.Call {
  get inputs(): SetCooldownDurationCall__Inputs {
    return new SetCooldownDurationCall__Inputs(this);
  }

  get outputs(): SetCooldownDurationCall__Outputs {
    return new SetCooldownDurationCall__Outputs(this);
  }
}

export class SetCooldownDurationCall__Inputs {
  _call: SetCooldownDurationCall;

  constructor(call: SetCooldownDurationCall) {
    this._call = call;
  }

  get _cooldownDuration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetCooldownDurationCall__Outputs {
  _call: SetCooldownDurationCall;

  constructor(call: SetCooldownDurationCall) {
    this._call = call;
  }
}

export class SetGovCall extends ethereum.Call {
  get inputs(): SetGovCall__Inputs {
    return new SetGovCall__Inputs(this);
  }

  get outputs(): SetGovCall__Outputs {
    return new SetGovCall__Outputs(this);
  }
}

export class SetGovCall__Inputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }

  get _gov(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovCall__Outputs {
  _call: SetGovCall;

  constructor(call: SetGovCall) {
    this._call = call;
  }
}

export class SetHandlerCall extends ethereum.Call {
  get inputs(): SetHandlerCall__Inputs {
    return new SetHandlerCall__Inputs(this);
  }

  get outputs(): SetHandlerCall__Outputs {
    return new SetHandlerCall__Outputs(this);
  }
}

export class SetHandlerCall__Inputs {
  _call: SetHandlerCall;

  constructor(call: SetHandlerCall) {
    this._call = call;
  }

  get _handler(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _isActive(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetHandlerCall__Outputs {
  _call: SetHandlerCall;

  constructor(call: SetHandlerCall) {
    this._call = call;
  }
}

export class SetLlpCall extends ethereum.Call {
  get inputs(): SetLlpCall__Inputs {
    return new SetLlpCall__Inputs(this);
  }

  get outputs(): SetLlpCall__Outputs {
    return new SetLlpCall__Outputs(this);
  }
}

export class SetLlpCall__Inputs {
  _call: SetLlpCall;

  constructor(call: SetLlpCall) {
    this._call = call;
  }

  get _llp(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLlpCall__Outputs {
  _call: SetLlpCall;

  constructor(call: SetLlpCall) {
    this._call = call;
  }
}

export class SetMaxPoolValueCall extends ethereum.Call {
  get inputs(): SetMaxPoolValueCall__Inputs {
    return new SetMaxPoolValueCall__Inputs(this);
  }

  get outputs(): SetMaxPoolValueCall__Outputs {
    return new SetMaxPoolValueCall__Outputs(this);
  }
}

export class SetMaxPoolValueCall__Inputs {
  _call: SetMaxPoolValueCall;

  constructor(call: SetMaxPoolValueCall) {
    this._call = call;
  }

  get _maxPoolValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxPoolValueCall__Outputs {
  _call: SetMaxPoolValueCall;

  constructor(call: SetMaxPoolValueCall) {
    this._call = call;
  }
}

export class SetUsdlCall extends ethereum.Call {
  get inputs(): SetUsdlCall__Inputs {
    return new SetUsdlCall__Inputs(this);
  }

  get outputs(): SetUsdlCall__Outputs {
    return new SetUsdlCall__Outputs(this);
  }
}

export class SetUsdlCall__Inputs {
  _call: SetUsdlCall;

  constructor(call: SetUsdlCall) {
    this._call = call;
  }

  get _usdl(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUsdlCall__Outputs {
  _call: SetUsdlCall;

  constructor(call: SetUsdlCall) {
    this._call = call;
  }
}

export class SetUtilsCall extends ethereum.Call {
  get inputs(): SetUtilsCall__Inputs {
    return new SetUtilsCall__Inputs(this);
  }

  get outputs(): SetUtilsCall__Outputs {
    return new SetUtilsCall__Outputs(this);
  }
}

export class SetUtilsCall__Inputs {
  _call: SetUtilsCall;

  constructor(call: SetUtilsCall) {
    this._call = call;
  }

  get _utils(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetUtilsCall__Outputs {
  _call: SetUtilsCall;

  constructor(call: SetUtilsCall) {
    this._call = call;
  }
}

export class SetVaultCall extends ethereum.Call {
  get inputs(): SetVaultCall__Inputs {
    return new SetVaultCall__Inputs(this);
  }

  get outputs(): SetVaultCall__Outputs {
    return new SetVaultCall__Outputs(this);
  }
}

export class SetVaultCall__Inputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }

  get _vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultCall__Outputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }
}

export class WhiteListTokenCall extends ethereum.Call {
  get inputs(): WhiteListTokenCall__Inputs {
    return new WhiteListTokenCall__Inputs(this);
  }

  get outputs(): WhiteListTokenCall__Outputs {
    return new WhiteListTokenCall__Outputs(this);
  }
}

export class WhiteListTokenCall__Inputs {
  _call: WhiteListTokenCall;

  constructor(call: WhiteListTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WhiteListTokenCall__Outputs {
  _call: WhiteListTokenCall;

  constructor(call: WhiteListTokenCall) {
    this._call = call;
  }
}
